import {
  Injectable,
  OnModuleInit,
  Logger,
  BadRequestException,
  InternalServerErrorException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import { User } from '../user/entity/user.entity';
import { UserRole } from '../../shared/shared.interfaces';
import { CreateProductDto } from '../../products/dto/create-product.dto';
import { ProductsService } from '../../products/products.service';
import { ConfigService } from '@nestjs/config';
import { ImageOptimizationService } from '../../shared/services/image-optimization.service';
// import { IAdminService } from '../../shared/shared.interfaces';
import { FileUploadErrorHandlerService } from '../../shared/services/file-upload-error-handler.service';
import { UploadMonitoringService } from '../../shared/services/upload-monitoring.service';

@Injectable()
export class AdminService implements OnModuleInit {
  private readonly logger = new Logger(AdminService.name);
  private userRepository: Repository<User>;
  private readonly productsService: ProductsService;
  private readonly config: ConfigService;
  private readonly imageOptimizationService: ImageOptimizationService;
  private readonly errorHandlerService: FileUploadErrorHandlerService;
  private readonly uploadMonitoringService: UploadMonitoringService;

  constructor(
    @InjectRepository(User) userRepository: Repository<User>,
    productsService: ProductsService,
    config: ConfigService,
    imageOptimizationService: ImageOptimizationService,
    errorHandlerService: FileUploadErrorHandlerService,
    uploadMonitoringService: UploadMonitoringService
  ) {
    this.userRepository = userRepository;
    this.productsService = productsService;
    this.config = config;
    this.imageOptimizationService = imageOptimizationService;
    this.errorHandlerService = errorHandlerService;
    this.uploadMonitoringService = uploadMonitoringService;
  }

  async onModuleInit() {
    const adminEmail = this.config.get<string>('ADMIN_EMAIL');
    const adminPassword = this.config.get<string>('ADMIN_PASSWORD');

    if (!adminEmail || !adminPassword) {
      return;
    }

    let admin = await this.userRepository.findOne({
      where: { email: adminEmail },
    });

    if (!admin) {
      const hashedPassword = await bcrypt.hash(adminPassword, 10);
      admin = this.userRepository.create({
        email: adminEmail,
        password: hashedPassword,
        role: UserRole.ADMIN,
        isEmailVerified: true,
      });
      await this.userRepository.save(admin);
      this.logger.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: ${adminEmail}`);
    } else {
      this.logger.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${adminEmail}`);
    }
  }

  async addProduct(
    files: Express.Multer.File[],
    productData: CreateProductDto
  ) {
    const startTime = Date.now();
    this.logger.log(
      `–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ${files?.length || 0} —Ñ–∞–π–ª–∞–º–∏`
    );

    if (!files || files.length === 0) {
      this.logger.warn('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
      throw new BadRequestException(
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
      );
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å graceful fallback
    this.logger.log('–ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
    const validationResults = await Promise.all(
      files.map(async file => {
        try {
          return await this.errorHandlerService.validateFileWithFallback(file);
        } catch (error) {
          this.logger.error(
            `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ ${file.originalname}:`,
            error.message
          );
          return { valid: false, error: error.message };
        }
      })
    );

    const invalidFiles = validationResults.filter(result => !result.valid);
    if (invalidFiles.length > 0) {
      this.logger.warn(
        `–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã: ${invalidFiles.map(f => f.error).join(', ')}`
      );
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    const validFiles = files.filter(
      (_, index) => validationResults[index].valid
    );
    this.logger.log(`–í–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${validFiles.length} –∏–∑ ${files.length}`);

    if (validFiles.length === 0) {
      this.logger.error('–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
      throw new BadRequestException('–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
    }

    try {
      this.logger.log('–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º');

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫, graceful fallback –∏ retry
      const uploadResult =
        await this.errorHandlerService.handleUploadWithRollback(
          validFiles,
          async file => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const retryResult = await this.errorHandlerService.processWithRetry(
              file,
              async fileToProcess => {
                try {
                  const result =
                    await this.imageOptimizationService.processAndSave(
                      fileToProcess.buffer,
                      fileToProcess.originalname,
                      {
                        quality: 80,
                        width: 1600,
                        height: 1600,
                        format: 'webp',
                        generateThumbnail: true,
                        thumbnailSize: 300,
                      }
                    );
                  return result.mainPath;
                } catch (error) {
                  this.logger.error(
                    `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${fileToProcess.originalname}:`,
                    error.message
                  );
                  throw error;
                }
              },
              3 // 3 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
            );

            if (!retryResult.success) {
              throw new Error(retryResult.error);
            }

            return retryResult.filePath!;
          },
          0.7 // 70% —Ñ–∞–π–ª–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        );

      if (!uploadResult.success) {
        this.logger.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${uploadResult.error}`);
        throw new BadRequestException(uploadResult.error);
      }

      // –ü–æ–ª—É—á–∞–µ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      const successfulUploads = uploadResult.results.filter(r => r.success);
      const imagePaths = successfulUploads.map(r => r.filePath!);

      if (imagePaths.length === 0) {
        this.logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        throw new BadRequestException(
          '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
        );
      }

      this.logger.log(
        `–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${imagePaths.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç`
      );

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Ç—è–º–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
      const productWithImages: CreateProductDto = {
        ...productData,
        img: imagePaths,
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
      const product =
        await this.productsService.createProduct(productWithImages);

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = this.errorHandlerService.getUploadStatistics(
        uploadResult.results
      );
      this.logger.log(
        `‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ID ${product.id} —Å ${imagePaths.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`
      );
      this.logger.log(
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${stats.successful}/${stats.total} —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ (${Math.round(stats.successRate * 100)}%)`
      );

      if (stats.failed > 0) {
        this.logger.warn(`‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏: ${stats.errors.join(', ')}`);
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      const uploadTime = Date.now() - startTime;
      this.uploadMonitoringService.recordUploadResults(
        uploadResult.results,
        uploadTime
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
      const warnings = this.uploadMonitoringService.getWarnings();
      if (warnings.length > 0) {
        this.logger.warn(`–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warnings.join('; ')}`);
      }

      return product;
    } catch (error) {
      this.logger.error(
        `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:`,
        error.message
      );

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (error instanceof Error) {
        this.logger.error(`Stack trace: ${error.stack}`);
      }

      // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      if (error instanceof BadRequestException) {
        throw error;
      }

      throw new InternalServerErrorException(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ${error.message}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  getUploadStatistics() {
    return this.uploadMonitoringService.exportMetrics();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
   */
  getSystemWarnings() {
    return this.uploadMonitoringService.getWarnings();
  }

  /**
   * –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫
   */
  clearUploadHistory() {
    this.uploadMonitoringService.clearHistory();
    this.logger.log('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –æ—á–∏—â–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
  }
}
