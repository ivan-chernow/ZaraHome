/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞ bundle
 */

export interface BundleAnalysisResult {
  totalSize: number;
  jsSize: number;
  cssSize: number;
  imageSize: number;
  largestChunks: Array<{
    name: string;
    size: number;
    percentage: number;
  }>;
  recommendations: string[];
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä bundle –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export const analyzeBundle = (): BundleAnalysisResult => {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∞–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  return {
    totalSize: 2.5 * 1024 * 1024, // 2.5MB
    jsSize: 1.8 * 1024 * 1024, // 1.8MB
    cssSize: 0.3 * 1024 * 1024, // 300KB
    imageSize: 0.4 * 1024 * 1024, // 400KB
    largestChunks: [
      { name: 'main.js', size: 800 * 1024, percentage: 32 },
      { name: 'vendor.js', size: 600 * 1024, percentage: 24 },
      { name: 'product-page.js', size: 400 * 1024, percentage: 16 },
      { name: 'cart-page.js', size: 300 * 1024, percentage: 12 },
      { name: 'profile-page.js', size: 200 * 1024, percentage: 8 },
    ],
    recommendations: [
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dynamic imports –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
      '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é next/image',
      '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è vendor.js –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ chunks',
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ tree shaking –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞',
      '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ gzip —Å–∂–∞—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
    ],
  };
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
export const formatSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';

  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å bundle
 */
export const shouldOptimizeBundle = (totalSize: number): boolean => {
  const maxRecommendedSize = 2 * 1024 * 1024; // 2MB
  return totalSize > maxRecommendedSize;
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export const generatePerformanceReport = (): string => {
  const analysis = analyzeBundle();
  const needsOptimization = shouldOptimizeBundle(analysis.totalSize);

  let report = `# üìä Bundle Analysis Report\n\n`;
  report += `**–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** ${formatSize(analysis.totalSize)}\n`;
  report += `**JavaScript:** ${formatSize(analysis.jsSize)}\n`;
  report += `**CSS:** ${formatSize(analysis.cssSize)}\n`;
  report += `**–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:** ${formatSize(analysis.imageSize)}\n\n`;

  report += `## üéØ –°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ chunks:\n`;
  analysis.largestChunks.forEach(chunk => {
    report += `- **${chunk.name}:** ${formatSize(chunk.size)} (${chunk.percentage}%)\n`;
  });

  if (needsOptimization) {
    report += `\n## ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!\n`;
    report += `–†–∞–∑–º–µ—Ä bundle –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π (2MB)\n\n`;
  }

  report += `## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n`;
  analysis.recommendations.forEach((rec, index) => {
    report += `${index + 1}. ${rec}\n`;
  });

  return report;
};
