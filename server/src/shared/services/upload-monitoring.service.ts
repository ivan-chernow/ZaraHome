import { Injectable, Logger } from '@nestjs/common';
import { UploadResult } from './file-upload-error-handler.service';

export interface UploadMetrics {
  totalUploads: number;
  successfulUploads: number;
  failedUploads: number;
  successRate: number;
  averageFileSize: number;
  totalFileSize: number;
  commonErrors: Map<string, number>;
  uploadTimes: number[];
  lastUploadTime: Date;
}

export interface ErrorAnalysis {
  mostCommonError: string;
  errorFrequency: number;
  errorTrend: 'increasing' | 'decreasing' | 'stable';
  recommendations: string[];
}

@Injectable()
export class UploadMonitoringService {
  private readonly logger = new Logger(UploadMonitoringService.name);
  private uploadHistory: UploadResult[] = [];
  private uploadTimes: number[] = [];
  private readonly maxHistorySize = 1000; // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–≥—Ä—É–∑–æ–∫

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  recordUploadResults(results: UploadResult[], uploadTimeMs: number): void {
    this.uploadHistory.push(...results);
    this.uploadTimes.push(uploadTimeMs);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.uploadHistory.length > this.maxHistorySize) {
      const excess = this.uploadHistory.length - this.maxHistorySize;
      this.uploadHistory.splice(0, excess);
      this.uploadTimes.splice(0, excess);
    }

    this.logger.log(
      `–ó–∞–ø–∏—Å–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏: ${results.length} —Ñ–∞–π–ª–æ–≤ –∑–∞ ${uploadTimeMs}ms`
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–æ–∫
   */
  getCurrentMetrics(): UploadMetrics {
    const totalUploads = this.uploadHistory.length;
    const successfulUploads = this.uploadHistory.filter(r => r.success).length;
    const failedUploads = totalUploads - successfulUploads;
    const successRate = totalUploads > 0 ? successfulUploads / totalUploads : 0;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    const commonErrors = new Map<string, number>();
    this.uploadHistory
      .filter(r => !r.success && r.error)
      .forEach(result => {
        const error = result.error!;
        commonErrors.set(error, (commonErrors.get(error) || 0) + 1);
      });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    const fileSizes = this.uploadHistory
      .filter(r => r.success)
      .map(r => r.filePath)
      .filter(Boolean)
      .map(path => this.estimateFileSize(path!));

    const totalFileSize = fileSizes.reduce((sum, size) => sum + size, 0);
    const averageFileSize =
      fileSizes.length > 0 ? totalFileSize / fileSizes.length : 0;

    const lastUploadTime =
      this.uploadTimes.length > 0
        ? new Date(Date.now() - this.uploadTimes[this.uploadTimes.length - 1])
        : new Date();

    return {
      totalUploads,
      successfulUploads,
      failedUploads,
      successRate,
      averageFileSize,
      totalFileSize,
      commonErrors,
      uploadTimes: [...this.uploadTimes],
      lastUploadTime,
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  analyzeErrors(): ErrorAnalysis {
    const metrics = this.getCurrentMetrics();
    const commonErrors = Array.from(metrics.commonErrors.entries());

    if (commonErrors.length === 0) {
      return {
        mostCommonError: '–ù–µ—Ç –æ—à–∏–±–æ–∫',
        errorFrequency: 0,
        errorTrend: 'stable',
        recommendations: ['–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ'],
      };
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    commonErrors.sort((a, b) => b[1] - a[1]);
    const [mostCommonError, errorFrequency] = commonErrors[0];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ –æ—à–∏–±–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–≥—Ä—É–∑–æ–∫ vs –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 100)
    const recentUploads = this.uploadHistory.slice(-100);
    const previousUploads = this.uploadHistory.slice(-200, -100);

    const recentErrorRate =
      recentUploads.length > 0
        ? recentUploads.filter(r => !r.success).length / recentUploads.length
        : 0;

    const previousErrorRate =
      previousUploads.length > 0
        ? previousUploads.filter(r => !r.success).length /
          previousUploads.length
        : 0;

    let errorTrend: 'increasing' | 'decreasing' | 'stable';
    if (recentErrorRate > previousErrorRate + 0.1) {
      errorTrend = 'increasing';
    } else if (recentErrorRate < previousErrorRate - 0.1) {
      errorTrend = 'decreasing';
    } else {
      errorTrend = 'stable';
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    const recommendations = this.generateRecommendations(
      commonErrors,
      errorTrend,
      metrics
    );

    return {
      mostCommonError,
      errorFrequency,
      errorTrend,
      recommendations,
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
   */
  private generateRecommendations(
    commonErrors: [string, number][],
    errorTrend: 'increasing' | 'decreasing' | 'stable',
    metrics: UploadMetrics
  ): string[] {
    const recommendations: string[] = [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
    commonErrors.forEach(([error, _count]) => {
      if (error.includes('—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π')) {
        recommendations.push(
          '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤'
        );
      }
      if (error.includes('–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø')) {
        recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤');
      }
      if (error.includes('–ø—É—Å—Ç–æ–π')) {
        recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤');
      }
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
    if (errorTrend === 'increasing') {
      recommendations.push(
        '‚ö†Ô∏è –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã'
      );
    } else if (errorTrend === 'decreasing') {
      recommendations.push(
        '‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è. –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è'
      );
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (metrics.successRate < 0.8) {
      recommendations.push(
        'üî¥ –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'
      );
    } else if (metrics.successRate > 0.95) {
      recommendations.push('üü¢ –û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–æ–∫');
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    if (metrics.averageFileSize > 5 * 1024 * 1024) {
      // > 5MB
      recommendations.push(
        'üìÅ –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –∑–∞–º–µ–¥–ª—è—Ç—å –∑–∞–≥—Ä—É–∑–∫—É. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–∂–∞—Ç–∏–µ'
      );
    }

    return recommendations;
  }

  /**
   * –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫
   */
  clearHistory(): void {
    this.uploadHistory = [];
    this.uploadTimes = [];
    this.logger.log('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –æ—á–∏—â–µ–Ω–∞');
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
   */
  exportMetrics(): Record<string, unknown> {
    const metrics = this.getCurrentMetrics();
    const errorAnalysis = this.analyzeErrors();

    return {
      timestamp: new Date().toISOString(),
      metrics: {
        ...metrics,
        commonErrors: Object.fromEntries(metrics.commonErrors),
      },
      errorAnalysis,
      systemHealth: this.calculateSystemHealth(metrics),
    };
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
   */
  private calculateSystemHealth(
    metrics: UploadMetrics
  ): 'excellent' | 'good' | 'warning' | 'critical' {
    if (metrics.successRate >= 0.95) return 'excellent';
    if (metrics.successRate >= 0.85) return 'good';
    if (metrics.successRate >= 0.7) return 'warning';
    return 'critical';
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
   */
  private estimateFileSize(filePath: string): number {
    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fs.stat
    if (filePath.includes('thumb-')) {
      return 50 * 1024; // ~50KB –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä
    }
    return 500 * 1024; // ~500KB –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  }

  /**
   * –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
   */
  getWarnings(): string[] {
    const warnings: string[] = [];
    const metrics = this.getCurrentMetrics();
    const errorAnalysis = this.analyzeErrors();

    if (metrics.successRate < 0.8) {
      warnings.push(
        `–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: ${Math.round(metrics.successRate * 100)}%`
      );
    }

    if (errorAnalysis.errorTrend === 'increasing') {
      warnings.push('–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏');
    }

    if (metrics.failedUploads > 50) {
      warnings.push(
        `–ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: ${metrics.failedUploads}`
      );
    }

    return warnings;
  }
}
