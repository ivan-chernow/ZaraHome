import { NestFactory } from '@nestjs/core';
import { ValidationPipe, Logger } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';
import { ConfigService } from '@nestjs/config';
import { NestExpressApplication } from '@nestjs/platform-express';
import { join } from 'path';

const logger = new Logger('Bootstrap');

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);
  const configService = app.get(ConfigService);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
  const config = {
    app: {
      nodeEnv: configService.get('app.nodeEnv'),
      port: configService.get('app.port'),
      isDevelopment: configService.get('app.isDevelopment'),
    },
    database: {
      host: configService.get('database.host'),
      port: configService.get('database.port'),
      database: configService.get('database.database'),
      synchronize: configService.get('database.synchronize'),
      logging: configService.get('database.logging'),
    },
    jwt: {
      secret: configService.get('jwt.secret'),
      accessExpiresIn: configService.get('jwt.accessExpiresIn'),
    },
    cors: {
      origin: configService.get('cors.origin'),
      credentials: configService.get('cors.credentials'),
    },
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  validateCriticalConfig(config);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  logServerConfig(config);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  app.enableCors(config.cors);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  app.useStaticAssets(join(__dirname, '..', '..', 'uploads'), {
    prefix: '/uploads/',
  });

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      transformOptions: {
        enableImplicitConversion: true,
      },
    }),
  );

  // Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è development)
  if (config.app.isDevelopment) {
    setupSwagger(app);
  }

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  await app.listen(config.app.port);
  
  logger.log(`üéâ Server is running on: http://localhost:${config.app.port}`);
  
  if (config.app.isDevelopment) {
    logDevelopmentInfo(config);
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
function validateCriticalConfig(config: any) {
  const errors: string[] = [];

  if (!config.jwt.secret || config.jwt.secret.length < 32) {
    errors.push('JWT secret must be at least 32 characters long');
  }

  if (!config.app.port) {
    errors.push('Port is required');
  }

  if (!config.database.host || !config.database.database) {
    errors.push('Database host and database name are required');
  }

  if (errors.length > 0) {
    logger.error('‚ùå Configuration validation failed:');
    errors.forEach(error => logger.error(`   - ${error}`));
    logger.error('Please check your .env file and required environment variables');
    process.exit(1);
  }

  logger.log('‚úÖ Configuration validation passed');
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
function logServerConfig(config: any) {
  logger.log('üöÄ Starting ZaraHome ECOM Server');
  logger.log(`üåç Environment: ${config.app.nodeEnv}`);
  logger.log(`üåê Port: ${config.app.port}`);
  logger.log(`üóÑÔ∏è Database: ${config.database.host}:${config.database.port}/${config.database.database}`);
  logger.log(`üîê JWT Expires In: ${config.jwt.accessExpiresIn}`);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Swagger
function setupSwagger(app: NestExpressApplication) {
  const config = new DocumentBuilder()
    .setTitle('ZaraHome ECOM API')
    .setDescription('API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è ZaraHome ECOM')
    .setVersion('1.0')
    .addBearerAuth()
    .build();
  
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('docs', app, document);
  
  logger.log('üìö Swagger documentation available at /docs');
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è development
function logDevelopmentInfo(config: any) {
  logger.log('üîç Development mode enabled');
  logger.log(`üìä Database sync: ${config.database.synchronize ? 'ON' : 'OFF'}`);
  logger.log(`üìù Database logging: ${config.database.logging ? 'ON' : 'OFF'}`);
}

bootstrap().catch((error) => {
  logger.error('‚ùå Failed to start server:', error);
  process.exit(1);
});  
