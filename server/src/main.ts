import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';
import { ConfigService } from '@nestjs/config';

import { NestExpressApplication } from '@nestjs/platform-express';
import { join } from 'path';

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);

  // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const configService = app.get(ConfigService);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  try {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –¥–ª–∏–Ω–∞ JWT —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    const jwtSecret = configService.get('jwt.secret');
    if (!jwtSecret || jwtSecret.length < 32) {
      throw new Error('JWT secret must be at least 32 characters long');
    }
    console.log('‚úÖ Configuration validation passed');
  } catch (error) {
    console.error('‚ùå Configuration validation failed:', error.message);
    console.error('Please check your .env file and required environment variables');
    process.exit(1);
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  console.log(`üöÄ Starting ZaraHome ECOM Server`);
  console.log(`üåç Environment: ${configService.get('app.nodeEnv')}`);
  console.log(`üåê Port: ${configService.get('app.port')}`);
  console.log(`üóÑÔ∏è Database: ${configService.get('database.host')}:${configService.get('database.port')}/${configService.get('database.database')}`);
  console.log(`üîê JWT Expires In: ${configService.get('jwt.accessExpiresIn')}`);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  app.enableCors({
    origin: configService.get('cors.origin'),
    credentials: configService.get('cors.credentials'),
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.useStaticAssets(join(__dirname, '..', '..', 'uploads'), {
    prefix: '/uploads/',
  });

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      transformOptions: {
        enableImplicitConversion: true,
      },
    }),
  );

  // Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è development)
  if (configService.get('app.isDevelopment')) {
    const config = new DocumentBuilder()
      .setTitle('ZaraHome ECOM API')
      .setDescription('API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è ZaraHome ECOM')
      .setVersion('1.0')
      .addBearerAuth()
      .build();
    
    const document = SwaggerModule.createDocument(app, config);
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –±—É–¥–µ—Ç –ø–æ /api/docs (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–µ—Ñ–∏–∫—Å)
    SwaggerModule.setup('docs', app, document);

    console.log('üìö Swagger documentation available at /docs');
  }

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  const port = configService.get('app.port');
  await app.listen(port);
  
  console.log(`üéâ Server is running on: http://localhost:${port}`);
  
  if (configService.get('app.isDevelopment')) {
    console.log(`üîç Development mode enabled`);
    console.log(`üìä Database sync: ${configService.get('database.synchronize') ? 'ON' : 'OFF'}`);
    console.log(`üìù Database logging: ${configService.get('database.logging') ? 'ON' : 'OFF'}`);
  }
}

bootstrap().catch((error) => {
  console.error('‚ùå Failed to start server:', error);
  process.exit(1);
});  
